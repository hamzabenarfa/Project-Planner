generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
  MANAGER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  hash      String
  hashRt    String?
  role      Role     @default(MANAGER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams          Team[]          @relation("TeamOwner")
  teamMembers    TeamMember[]
  projectMembers ProjectMember[]
  Project        Project[]

  @@map("users")
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String
  ownerId   Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User         @relation("TeamOwner", fields: [ownerId], references: [id])
  members TeamMember[]

  @@map("teams")
}

enum Status {
  BUILDING
  STARTED
  PENDING
  INPROGRESS
}

model Project {
  id             Int      @id @default(autoincrement())
  name           String
  status         Status   @default(PENDING)
  totalTasks     Int      @default(0)
  tasksCompleted Int      @default(0)
  progress       Int      @default(0)
  pinned         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  projectMembers ProjectMember[]
  User           User?           @relation(fields: [ownerId], references: [id] , onDelete: Cascade)
  ownerId        Int?

  kanban Kanban?

  @@unique([name, ownerId]) 
  @@map("projects")
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  teamId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
  @@map("team_members")
}

model ProjectMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@map("project_members")
}

model Resource {
  id       Int    @id @default(autoincrement())
  filename String
  type     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resources")
}

model Kanban {
  id        Int      @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id])
  projectId Int @unique
  
  columns Column[]
  //tasks   Task[]

  @@map("kanbans")
}

model Column {
  id        Int      @id @default(autoincrement())
  name      String
  completed Boolean @default(false)
  kanbanId  Int

  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  kanban Kanban @relation(fields: [kanbanId], references: [id])
  tasks  Task[]

  @@map("columns")
  @@unique([name,kanbanId])
}

model Task {
  id        Int      @id @default(autoincrement())
  name      String
  columnId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  column Column @relation(fields: [columnId], references: [id])

  @@map("tasks")
}