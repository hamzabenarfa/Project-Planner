generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
  MANAGER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  hash      String
  hashRt    String?
  role      Role     @default(MANAGER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams          Team[]          @relation("TeamOwner")
  teamMembers    TeamMember[]
  projectMembers ProjectMember[]
  Project        Project[]

  @@map("users")
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String
  ownerId   Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User         @relation("TeamOwner", fields: [ownerId], references: [id])
  members TeamMember[]

  @@map("teams")
}

enum Status {
  BUILDING
  STARTED
  PENDING
  STOPPED
  INPROGRESS
}

model Project {
  id     Int    @id @default(autoincrement())
  name   String
  status Status @default(PENDING)

  pinned    Boolean   @default(false)
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  projectMembers ProjectMember[]
  User           User?           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        Int?

  kanban           Kanban?
  BurnDownSnapshot BurnDownSnapshot[]

  @@unique([name, ownerId])
  @@map("projects")
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  teamId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
  @@map("team_members")
}

model ProjectMember {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@map("project_members")
}

model Resource {
  id       Int    @id @default(autoincrement())
  filename String
  type     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resources")
}

model Kanban {
  id Int @id @default(autoincrement())

  totalTasks Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int     @unique

  columns Column[]
  //tasks   Task[]

  @@map("kanbans")
}

enum ColumnType {
  TODO
  INPROGRESS
  InReview
  DONE
}

model Column {
  id         Int        @id @default(autoincrement())
  name       String
  done       Boolean    @default(false)
  columnType ColumnType

  kanbanId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  kanban Kanban @relation(fields: [kanbanId], references: [id])
  tasks  Task[]

  @@unique([name, kanbanId])
  @@map("columns")
}

model Task {
  id   Int    @id @default(autoincrement())
  name String

  description String?  @db.LongText
  columnId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  column Column @relation(fields: [columnId], references: [id])

  @@unique([name, columnId])
  @@map("tasks")
}

model BurnDownSnapshot {
  id              Int      @id @default(autoincrement())
  projectId       Int
  date            DateTime @default(now())
  todoCount       Int
  inProgressCount Int
  inReviewCount   Int
  doneCount       Int

  project Project @relation(fields: [projectId], references: [id])

  @@map("burn_down_snapshots")
}
